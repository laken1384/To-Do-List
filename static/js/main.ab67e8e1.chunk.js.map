{"version":3,"sources":["components/TodoList/style.module.scss","components/base/Clock/style.module.scss","components/base/AddList/style.module.scss","components/base/AddList/ColorButton/style.module.scss","components/base/Panel/style.module.scss","components/base/Panel/TodoItem/style.module.scss","components/base/SaveButton/style.module.scss","components/base/Clock/index.jsx","components/base/AddList/ColorButton/index.jsx","components/TodoList/useTaskReducer.js","components/base/AddList/index.jsx","components/base/Panel/TodoItem/index.jsx","components/base/Panel/index.jsx","components/base/SaveButton/index.jsx","components/TodoList/index.jsx","views/Home/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","cx","classnames","bind","styles","Clock","time","setTime","useState","dayjs","useEffect","timeId","setInterval","counter","add","clearInterval","_jsxs","className","children","_jsx","format","MdAccessAlarm","ColorButton","props","colorType","handleColor","selectedColor","active","onClick","e","initialState","allList","listTitle","listId","tasks","taskTitle","taskId","LIST_ACTION","INITIAL_STATE","ADD_LIST","EDIT_LIST","DELETE_LIST","MOVE_LIST","TASK_ACTION","ADD_TASK","EDIT_TASK","DELETE_TASK","MOVE_TASK","taskReducer","taskInfo","action","type","payload","editedList","map","list","deletedList","remainingLists","filter","editedTasks","task","remainingTasks","colorList","AddList","_ref","taskDispatch","setSelectedColor","inputRef","useRef","color","index","onSubmit","preventDefault","inputValue","current","value","trim","uuidv4","blur","id","placeholder","ref","onBlur","Panel","listIndex","isEditing","setIsEditing","listRef","taskRef","editList","newValue","deleteList","addTask","Draggable","draggableId","provided","innerRef","draggableProps","dragHandleProps","defaultValue","autoFocus","hidden","MdModeEdit","MdDelete","Droppable","droppableId","droppableProps","Item","itemIndex","deleteItem","editTask","SaveButton","saveAll","open","setOpen","React","handleSave","Snackbar","anchorOrigin","vertical","horizontal","onClose","autoHideDuration","message","TodoList","useReducer","useTaskReducer","localStorage","length","JSON","parse","getItem","DragDropContext","onDragEnd","dragInfo","destination","source","updatedPanelList","draggedPanel","splice","sourceList","targetList","draggedTask","direction","listItem","taskItem","saveAllTasks","setItem","stringify","Home","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","unstable_createMuiStrictModeTheme","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.ab67e8e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"style_container__3W5hH\",\"lists\":\"style_lists__2f5Ch\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clock\":\"style_clock__1lBCv\",\"date\":\"style_date__163Dw\",\"time\":\"style_time__3PkdG\",\"alarm-icon\":\"style_alarm-icon__2270L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add-list\":\"style_add-list__14wpM\",\"color-picker\":\"style_color-picker__8AS1A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"color-button\":\"style_color-button__2wSPs\",\"red\":\"style_red__vNQq8\",\"active\":\"style_active__1NHWg\",\"yellow\":\"style_yellow__3W-xG\",\"green\":\"style_green__3Tvya\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"panel\":\"style_panel__JIYol\",\"header\":\"style_header__3w4Rq\",\"actions\":\"style_actions__2mZQz\",\"btn\":\"style_btn__1ANR2\",\"hidden\":\"style_hidden__yyVsC\",\"body\":\"style_body__1hJ8r\",\"add-item\":\"style_add-item__1WWWz\",\"red\":\"style_red__1rg7c\",\"yellow\":\"style_yellow__2Zz1Q\",\"green\":\"style_green__1Kmfn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"style_item__3sowT\",\"actions\":\"style_actions__1z4tI\",\"hidden\":\"style_hidden__1q8wu\",\"btn\":\"style_btn__1awRD\",\"red\":\"style_red__1m3_y\",\"yellow\":\"style_yellow__1IZdw\",\"green\":\"style_green__2ueFG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"save\":\"style_save__2uRWZ\"};","import React, { useState, useEffect } from 'react'\nimport classnames from 'classnames/bind';\nimport styles from './style.module.scss';\nimport dayjs from 'dayjs';\nimport { MdAccessAlarm } from 'react-icons/md';\n\nconst cx = classnames.bind(styles);\n\n\n\n\n\nexport default function Clock() {\n    const [time, setTime] = useState(dayjs());\n\n    useEffect(() => {\n        const counter = () => setTime(time.add(1, 's'));\n        const timeId = setInterval(counter, 1000);\n        return () => {\n            clearInterval(timeId);\n        }\n    }, [time])\n        \n    return(\n        <div className={cx('clock')}>\n            <div className={cx('date')}>\n               {time.format('ddd, MMM DD, YYYY ')}\n            </div>\n            <div className={cx('time')}>\n               <div className={cx('alarm-icon')}><MdAccessAlarm /></div>\n               {time.format('HH:mm:ss')}\n            </div>\n            \n        </div>\n    )\n}","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./style.module.scss\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nColorButton.propTypes = {\n  colorType: PropTypes.string,\n  handleColor: PropTypes.func,\n  selectedColor: PropTypes.string,\n};\n\nexport default function ColorButton(props) {\n  const { colorType, handleColor, selectedColor } = props;\n\n  return (\n    <button\n      className={cx(\"color-button\", colorType, {\n        active: selectedColor === colorType,\n      })}\n      onClick={(e) => handleColor(colorType)}\n    />\n  );\n}\n","import { useReducer } from \"react\";\n\n// Initial state for task management\nconst initialState = {\n  allList: [\n    { listTitle: \"代辦事項\", listId: \"001\", colorType: \"red\" },\n    { listTitle: \"已完成事項\", listId: \"002\", colorType: \"green\" }\n  ],\n  tasks: {\n    \"001\": [\n      { taskTitle: \"健走十分鐘\", taskId: \"0011\" },\n      { taskTitle: \"飲水3000cc\", taskId: \"0012\" }\n    ],\n    \"002\": [\n      { taskTitle: \"買手機殼\", taskId: \"0021\" }\n    ]\n  },\n};\n\n// Action types for lists\nexport const LIST_ACTION = {\n  INITIAL_STATE: \"initialState\",\n  ADD_LIST: \"addList\",\n  EDIT_LIST: \"editList\",\n  DELETE_LIST: \"deleteList\",\n  MOVE_LIST: \"moveList\",\n};\n\n// Action types for tasks\nexport const TASK_ACTION = {\n  ADD_TASK: \"addTask\",\n  EDIT_TASK: \"editTask\",\n  DELETE_TASK: \"deleteTask\",\n  MOVE_TASK: \"moveTask\",\n};\n\n// Reducer function for managing tasks\nconst taskReducer = (taskInfo, action) => {\n  switch (action.type) {\n    case LIST_ACTION.INITIAL_STATE:\n      return action.payload;\n\n    case LIST_ACTION.ADD_LIST:\n      return {\n        allList: [...taskInfo.allList, action.payload],\n        tasks: { ...taskInfo.tasks, [action.payload.listId]: [] },\n      };\n\n    case LIST_ACTION.EDIT_LIST:\n      const editedList = taskInfo.allList.map(list => {\n        if (list.listId === action.payload.listId) {\n          return { ...list, listTitle: action.payload.listTitle };\n        }\n        return list;\n      });\n      return { ...taskInfo, allList: editedList };\n\n    case LIST_ACTION.DELETE_LIST:\n      const { [action.payload]: deletedList, ...remainingLists } = taskInfo.tasks;\n      return {\n        ...taskInfo,\n        tasks: remainingLists,\n        allList: taskInfo.allList.filter(list => list.listId !== action.payload),\n      };\n\n    case LIST_ACTION.MOVE_LIST:\n      return {\n        ...taskInfo,\n        allList: action.payload,\n      };\n\n    case TASK_ACTION.ADD_TASK:\n      return {\n        ...taskInfo,\n        tasks: {\n          ...taskInfo.tasks,\n          [action.list]: [...taskInfo.tasks[action.list], action.payload],\n        },\n      };\n\n    case TASK_ACTION.EDIT_TASK:\n      const editedTasks = taskInfo.tasks[action.list].map(task => {\n        if (task.taskId === action.payload.taskId) {\n          return { ...task, taskTitle: action.payload.taskTitle };\n        }\n        return task;\n      });\n      return {\n        ...taskInfo,\n        tasks: { ...taskInfo.tasks, [action.list]: editedTasks },\n      };\n\n    case TASK_ACTION.DELETE_TASK:\n      const remainingTasks = taskInfo.tasks[action.list].filter(task => task.taskId !== action.payload);\n      return {\n        ...taskInfo,\n        tasks: {\n          ...taskInfo.tasks,\n          [action.list]: remainingTasks,\n        },\n      };\n\n    case TASK_ACTION.MOVE_TASK:\n      return {\n        ...taskInfo,\n        tasks: action.payload,\n      };\n\n    default:\n      return taskInfo;\n  }\n};\n\n// Custom hook for managing tasks\nexport default function useTaskReducer() {\n  const [taskInfo, taskDispatch] = useReducer(taskReducer, initialState);\n  return [taskInfo, taskDispatch];\n}\n","import React, { useRef, useState } from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./style.module.scss\";\nimport PropTypes from \"prop-types\";\n\n// components\nimport ColorButton from \"./ColorButton\";\n\n// lib\nimport { v4 as uuidv4 } from \"uuid\";\n\n// utils\nimport { LIST_ACTION } from \"../../TodoList/useTaskReducer\";\n\nconst cx = classnames.bind(styles);\n\nAddList.propTypes = {\n  taskDispatch: PropTypes.func,\n};\n\nconst colorList = [\"red\", \"yellow\", \"green\"];\n\nexport default function AddList({ taskDispatch }) {\n  const [selectedColor, setSelectedColor] = useState(\"red\");\n  const inputRef = useRef();\n\n  const addList = (e) => {\n    e.preventDefault();\n    const inputValue = inputRef.current.value.trim();\n    if (inputValue) {\n      taskDispatch({\n        type: LIST_ACTION.ADD_LIST,\n        payload: {\n          listTitle: inputValue,\n          listId: uuidv4(),\n          colorType: selectedColor,\n        },\n      });\n      inputRef.current.value = \"\";\n      inputRef.current.blur();\n    }\n  };\n  return (\n    <div className={cx(\"add-list\")}>\n      <div className={cx(\"color-picker\")}>\n        {colorList.map((color, index) => (\n          <ColorButton\n            key={index}\n            colorType={color}\n            handleColor={setSelectedColor}\n            selectedColor={selectedColor}\n          />\n        ))}\n      </div>\n      <form onSubmit={addList}>\n        <input\n          id=\"addList\"\n          type=\"text\"\n          placeholder=\"Add a list\"\n          ref={inputRef}\n          onBlur={() => (inputRef.current.value = \"\")}\n        />\n        \n      </form>\n    </div>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport styles from \"./style.module.scss\";\nimport classnames from \"classnames/bind\";\n\n// lib\nimport { MdDelete, MdModeEdit } from \"react-icons/md\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\n// utils\nimport { TASK_ACTION } from \"@/TodoList/useTaskReducer\";\nimport PropTypes from \"prop-types\";\n\nconst cx = classnames.bind(styles);\n\nTodoItem.propTypes = {\n  taskTitle: PropTypes.string,\n  taskId: PropTypes.string,\n  colorType: PropTypes.string,\n  listId: PropTypes.string,\n  taskDispatch: PropTypes.func,\n  itemIndex: PropTypes.number,\n};\n\nexport default function TodoItem(props) {\n  const { taskTitle, taskId, colorType, listId, itemIndex, taskDispatch } = props;\n  const [isEditing, setIsEditing] = useState(false);\n  const inputRef = useRef();\n\n  const deleteItem = () => {\n    taskDispatch({\n      type: TASK_ACTION.DELETE_TASK,\n      list: listId,\n      payload: taskId,\n    });\n  };\n\n  const editTask = (e) => {\n    e.preventDefault();\n    const newValue = inputRef.current.value.trim();\n    if (!newValue) {\n      return;\n    } else if (newValue !== taskTitle) {\n      taskDispatch({\n        type: TASK_ACTION.EDIT_TASK,\n        list: listId,\n        payload: { taskTitle: newValue, taskId },\n      });\n    }\n    setIsEditing(false);\n  };\n\n  return (\n    <Draggable draggableId={taskId} index={itemIndex}>\n      {(provided) => (\n        <div\n          className={cx(\"item\", colorType)}\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          {isEditing ? (\n            <form onSubmit={editTask}>\n              <input\n                type=\"text\"\n                defaultValue={taskTitle}\n                autoFocus\n                ref={inputRef}\n                onBlur={() => setIsEditing(false)}\n              />\n            </form>\n          ) : (\n            <span>{taskTitle}</span>\n          )}\n          <div className={cx(\"actions\", { hidden: isEditing })}>\n            <div\n              className={cx(\"edit\", \"btn\")}\n              onClick={() => setIsEditing(true)}\n            >\n              <MdModeEdit />\n            </div>\n            <div className={cx(\"remove\", \"btn\")} onClick={deleteItem}>\n              <MdDelete />\n            </div>\n          </div>\n        </div>\n      )}\n    </Draggable>\n  );\n}\n","import React, { useState, useRef } from \"react\";\nimport styles from \"./style.module.scss\";\nimport classnames from \"classnames/bind\";\nimport PropTypes from 'prop-types'\n\n// components\nimport TodoItem from \"./TodoItem\";\n\n// lib\nimport { v4 as uuidv4 } from 'uuid';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport { MdDelete, MdModeEdit } from 'react-icons/md';\n\n// utils\nimport { LIST_ACTION, TASK_ACTION } from '../../TodoList/useTaskReducer';\n\nPanel.propTypes = {\n    listTitle: PropTypes.string,\n    listId: PropTypes.string,\n    children: PropTypes.any,\n    colorType: PropTypes.string,\n    listIndex: PropTypes.number,\n    taskDispatch: PropTypes.func\n}\n\nconst cx = classnames.bind(styles);\n\nexport default function Panel(props) {\n  const { listTitle, listId, colorType, children, listIndex, taskDispatch } = props;\n  const [isEditing, setIsEditing] = useState(false);\n  const listRef = useRef();\n  const taskRef = useRef();\n\n  const editList = (e) => {\n    e.preventDefault();\n    const newValue = listRef.current.value.trim();\n\n    if(!newValue) {\n      return;\n    }else if(newValue !== listTitle){\n      taskDispatch({\n        type: LIST_ACTION.EDIT_LIST,\n        payload: {listTitle: newValue, listId, colorType}\n      })\n      \n    }\n    setIsEditing(false);\n  }\n\n  const deleteList = () => {\n    taskDispatch({\n      type: LIST_ACTION.DELETE_LIST,\n      payload: listId\n    })\n  }\n\n\n\n  const addTask = (e) => {\n    e.preventDefault();\n    const newValue = taskRef.current.value.trim();\n    if (newValue) {\n      taskDispatch({\n        type: TASK_ACTION.ADD_TASK,\n        list: listId,\n        payload: {taskTitle: newValue,taskId: uuidv4()} \n      });\n    }\n    taskRef.current.value = '';\n    taskRef.current.blur();\n  };\n\n\n  return (\n\n    <Draggable draggableId={listId} index={listIndex}>\n      {(provided) => (\n      <div\n        className={cx(\"panel\", colorType)}\n        ref={provided.innerRef}\n          {...provided.draggableProps}   \n      >\n        <div className={cx(\"header\")}\n        {...provided.dragHandleProps}\n        >\n          {isEditing ? \n            <form onSubmit={editList}>\n                <input\n                  type=\"text\"\n                  defaultValue={listTitle}\n                  autoFocus\n                  ref={listRef}\n                  onBlur={() => setIsEditing(false)}/>\n                </form>\n            : \n            <span>{listTitle}</span>\n          }\n          <div className={cx('actions',{ hidden: isEditing })}>\n            <div className={cx('edit','btn')} onClick={() => setIsEditing(true)} ><MdModeEdit /></div>\n            <div className={cx('remove','btn')} onClick={deleteList} ><MdDelete /></div>\n          </div>\n        </div>\n        \n        <Droppable droppableId={listId}>\n          {(provided) => (\n            <div className={cx(\"body\")}\n              ref={provided.innerRef} \n              {...provided.droppableProps}\n            >\n                {children}\n                {provided.placeholder}\n            </div>\n          )} \n        </Droppable>\n\n        <div className={cx('add-item')}>\n          \n          <form onSubmit={addTask}>\n            <input\n              type='text'\n              placeholder='Add a task'\n              ref={taskRef}\n              onBlur={() => taskRef.current.value = ''}\n            />\n          </form>\n        </div>      \n      </div>\n    )}\n    </Draggable>\n  )\n  \n}\n\nPanel.Item = TodoItem;\n","import React from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./style.module.scss\";\nimport PropTypes from \"prop-types\";\nimport \"./snackbar.scss\";\n\n// lib\nimport Snackbar from \"@material-ui/core/Snackbar\";\n\nconst cx = classnames.bind(styles);\n\nSaveButton.propTypes = {\n  saveAll: PropTypes.func,\n};\n\nexport default function SaveButton({ saveAll }) {\n  const [open, setOpen] = React.useState(false);\n\n  const handleSave = () => {\n    saveAll();\n    setOpen(true);\n  };\n\n  return (\n    <div className={cx(\"save\")}>\n      <button onClick={handleSave}>Save</button>\n      <Snackbar className={cx(\"toast\")}\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        open={open}\n        onClose={() => setOpen(false)}\n        autoHideDuration={1000}\n        message=\"Saved successfully\"\n      ></Snackbar>\n    </div>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport classnames from \"classnames/bind\";\nimport styles from \"./style.module.scss\";\n\n// Components\nimport Clock from \"../base/Clock\";\nimport AddList from \"../base/AddList\";\nimport Panel from \"@/base/Panel\"; // Assuming this path is correctly configured\nimport SaveButton from \"../base/SaveButton\";\n\n// Libraries\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\n// Utils\nimport useTaskReducer, { TASK_ACTION, LIST_ACTION } from \"./useTaskReducer\";\n\nconst cx = classnames.bind(styles);\n\nfunction TodoList() {\n  // State management using custom hook\n  const [taskInfo, taskDispatch] = useTaskReducer();\n\n  // Function to handle drag and drop\n  const handleDragEnd = (dragInfo) => {\n    const { destination, source, type } = dragInfo;\n\n    // If there's no destination, do nothing\n    if (!destination) {\n      return;\n    }\n\n    // Handle dragging panels\n    if (type === \"panel\") {\n      const updatedPanelList = [...taskInfo.allList];\n      const draggedPanel = { ...updatedPanelList[source.index] };\n\n      updatedPanelList.splice(source.index, 1);\n      updatedPanelList.splice(destination.index, 0, draggedPanel);\n\n      taskDispatch({\n        type: LIST_ACTION.MOVE_LIST,\n        payload: updatedPanelList,\n      });\n\n      return;\n    }\n\n    // Handle dragging tasks\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return; // Do nothing if the task is dropped in the same position\n    }\n\n    const sourceList = [...taskInfo.tasks[source.droppableId]];\n    const targetList = [...taskInfo.tasks[destination.droppableId]];\n\n    if (destination.droppableId === source.droppableId) {\n      // If the task is dropped within the same list\n      const draggedTask = { ...sourceList[source.index] };\n\n      sourceList.splice(source.index, 1);\n      sourceList.splice(destination.index, 0, draggedTask);\n\n      taskDispatch({\n        type: TASK_ACTION.MOVE_TASK,\n        payload: { ...taskInfo.tasks, [source.droppableId]: sourceList },\n      });\n\n      return;\n    }\n\n    // If the task is dropped in a different list\n    targetList.splice(destination.index, 0, sourceList[source.index]);\n    sourceList.splice(source.index, 1);\n\n    taskDispatch({\n      type: TASK_ACTION.MOVE_TASK,\n      payload: {\n        ...taskInfo.tasks,\n        [source.droppableId]: sourceList,\n        [destination.droppableId]: targetList,\n      },\n    });\n  };\n\n  // Function to save all tasks to localStorage\n  const saveAllTasks = () => {\n    localStorage.setItem(\"board\", JSON.stringify(taskInfo));\n  };\n\n  // Effect to initialize state from localStorage\n  useEffect(() => {\n    if (localStorage.length) {\n      taskDispatch({\n        type: LIST_ACTION.INITIAL_STATE,\n        payload: JSON.parse(localStorage.getItem(\"board\")),\n      });\n    }\n  }, [taskDispatch]);\n\n  return (\n    <div className={cx(\"container\")}>\n      {/* Component to add new lists */}\n      <AddList taskDispatch={taskDispatch} />\n\n      {/* Drag and drop context */}\n      <DragDropContext onDragEnd={handleDragEnd}>\n        <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"panel\">\n          {(provided) => (\n            <div\n              className={cx(\"lists\")}\n              ref={provided.innerRef}\n              {...provided.droppableProps}\n            >\n              {taskInfo.allList.map((listItem, index) => (\n                <Panel\n                  key={listItem.listId}\n                  listIndex={index}\n                  listTitle={listItem.listTitle}\n                  listId={listItem.listId}\n                  colorType={listItem.colorType}\n                  taskDispatch={taskDispatch}\n                >\n                  {taskInfo.tasks[listItem.listId].map((taskItem, index) => (\n                    <Panel.Item\n                      key={taskItem.taskId}\n                      itemIndex={index}\n                      taskTitle={taskItem.taskTitle}\n                      taskId={taskItem.taskId}\n                      listId={listItem.listId}\n                      colorType={listItem.colorType}\n                      taskDispatch={taskDispatch}\n                    />\n                  ))}\n                </Panel>\n              ))}\n              {provided.placeholder}\n            </div>\n          )}\n        </Droppable>\n      </DragDropContext>\n\n      {/* Button to save all tasks */}\n      <SaveButton saveAll={saveAllTasks} />\n\n      {/* Clock component */}\n      <Clock />\n    </div>\n  );\n}\n\nexport default TodoList;\n","import React from \"react\";\nimport styles from \"../../styles/main.scss\";\nimport classnames from \"classnames/bind\";\n\n// components\nimport TodoList from \"../../components/TodoList\";\n\nconst cx = classnames.bind(styles);\n\nexport default function Home() {\n  return <div className={cx(\"home\")}>\n    <TodoList/>\n  </div>;\n}\n","import Home from \"./views/Home\";\n\nfunction App() {\n  return <Home />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// lib\nimport {\n  ThemeProvider,\n  unstable_createMuiStrictModeTheme,\n} from \"@material-ui/core/styles\";\n\nconst theme = unstable_createMuiStrictModeTheme();\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}